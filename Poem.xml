import java.time.ZonedDateTime;
        import java.time.ZoneId;
        import java.time.format.DateTimeFormatter;
        import java.time.format.DateTimeParseException;

        public class TimeChecker {

        // Method to validate the passed time in "HH:mm" format against Central Time (Chicago)
        public static boolean validateTimeWithCentralChicagoTime(String inputTime) {
        try {
        // Get the current time in Central Time (Chicago) formatted as "HH:mm"
        ZoneId centralTimeZone = ZoneId.of("America/Chicago");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        String centralTime = ZonedDateTime.now(centralTimeZone).format(timeFormatter);

        // Compare the passed time with the current Central Chicago time
        return centralTime.equals(inputTime);
        } catch (DateTimeParseException e) {
        System.out.println("Invalid time format. Please provide the time in 'HH:mm' format.");
        return false;
        }
        }
        }



        import java.time.ZonedDateTime;
        import java.time.ZoneId;
        import java.time.format.DateTimeFormatter;
        import java.time.format.DateTimeParseException;

        public class TimeChecker {

        // Method to validate the passed date in "MMddyyyy" format against Central Time (Chicago)
        public static boolean validateDateWithCentralChicagoTime(String inputDate) {
        try {
        // Get the current date in Central Time (Chicago) formatted as "MMddyyyy"
        ZoneId centralTimeZone = ZoneId.of("America/Chicago");
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("MMddyyyy");
        String centralDate = ZonedDateTime.now(centralTimeZone).format(dateFormatter);

        // Compare the passed date with the current Central Chicago date
        return centralDate.equals(inputDate);
        } catch (DateTimeParseException e) {
        System.out.println("Invalid date format. Please provide the date in 'MMddyyyy' format.");
        return false;
        }
        }
        }



        mport io.qameta.allure.Allure;

        public class YourTestSteps {

        public void compareQueries() {
        String query1 = "SELECT * FROM table1";
        String query2 = "SELECT * FROM table2";

        String result1 = executeQuery(query1);
        String result2 = executeQuery(query2);

        // Attach queries to the Allure report
        Allure.addAttachment("Query 1", query1);
        Allure.addAttachment("Query 2", query2);

        // Attach results to the Allure report
        Allure.addAttachment("Result 1", result1);
        Allure.addAttachment("Result 2", result2);

        // Perform comparison
        compareResults(result1, result2);
        }

        private String executeQuery(String query) {
        // Execute the query and return result
        String result = database.execute(query);
        return result;
        }

        private void compareResults(String expected, String actual) {
        Allure.step("Comparing results");
        Assert.assertEquals(expected, actual);
        }
        }